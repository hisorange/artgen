grammar AGL {
  meta DisplayName = "Artgen Grammar Language";
  meta Extensions = ".agl";
  meta Version = "1.0";

  channel Main;
  channel Syntax;
  channel Operator;
  channel Comment;
  channel WhiteSpace; # Hidden Channel

  struct WS -> WhiteSpace {
    parser EOL = "\n" | "\r\n";
    parser Tab = "\t";
    parser Space = " ";
    parser Set = EOL | Space | Tab;

    default parser Any *= Set;
  }

  # Defining the fundamentals for the language.
  parser Letter = a..Z;
  parser Digit = 0..9;
  parser Float = Digit+ > "." > Digit+;
  parser Number = Digit | Float;
  parser Symbol ^= Letter | Digit | WS;
  parser NumericRange = Digit+ > ".." > Digit+;
  parser AlphabeticRange = Letter > ".." > Letter;
  parser Boolean = "true" | "false";
  parser Range = NumericRange | AlphabeticRange;

  # Can be used in most languages
  parser SymbolName = (a..Z | "_")+ > (a..Z | 0..9 | "_")*;


  struct SingleQuotedString {
    parser Escape = "\\";
    parser Capsulator = "'" -> Syntax;

    # Double escape will truncate a single escape into the syntax channel.
    parser EscapeEscaper &= Escape -> Syntax;
    parser DoubleEscape = EscapeEscaper > Escape;

    # After the double escape sequnce we have a leftover of a single escape sequence.

    parser EscapeSequence = EscapeEscaper > Capsulator; #
    parser SpecialChar = Escape > (Capsulator | Escape)!; # For example the "Tab \t ulated"
    parser InCapsulation = ^(Capsulator | Escape) | DoubleEscape* | EscapeSequence | SpecialChar;

    default parser Definition = Capsulator > InCapsulation* > Capsulator;
  }

  struct DoubleQuotedString extends SingleQuotedString {
    parser Capsulator = "'" -> Syntax;
  }

  struct RegExpString extends SingleQuotedString {
    parser Capsulator = "/" -> Syntax;
  }

  parser QuotedString &= SingleQuotedString | DoubleQuotedString;

  struct Op -> Operator {
    parser ChannelIndicator = "->";

    parser RepeatNoneOrMore = "*";
    parser RepeatOnceOrMore = "+";
    parser RepeatNoneOrOnce = "?";
    parser RepetitionModifier = RepeatNoneOrMore | RepeatOnceOrMore | RepeatNoneOrOnce;

    parser GroupOpen = "(";
    parser GroupClose = ")";

    parser Concat = ">";
    parser Or = "|";
    parser Alias = "&";

    parser Invert = "^";

    parser DefinitionStart = "=" -> Syntax;
    parser DefinitionEnd = ";" -> Syntax;

    parser CommentLine = "#" -> Syntax;
    parser CommentStart = "/*" -> Syntax;
    parser CommentEnd = "*/" -> Syntax;
  }


  struct Syntax -> Syntax {
    parser ContextOpen = "{";
    parser ContextClose = "}";
  }

  struct Comment -> Comment {
    parser SingleLine = Op.CommentLine > ^WhiteSpace.EOL*;
    parser MultiLine = CommentStart > ^CommentEnd* > CommentEnd;

    default parser Any *= SingleLine | MultiLine;
  }

  # Symbol prefixes
  struct Keyword -> Syntax {
    parser Grammar = "grammar";
    parser Meta = "meta";
    parser Channel = "channel";
    parser Struct = "struct";
    parser Parser = "parser";
    parser Default = "default";
  }

  # Example: meta IsThisReality = true;
  struct Meta -> Main {
    parser Keyword &= Keyword.Meta;
    parser Key &= SymbolName;
    parser Value &= QuotedString | Number | Boolean;

    default parser Definition = Keyword > WS.Set+ > Key > WS > Op.DefinitionStart > WS > Value > WS > Op.DefinitionEnd;
  }

  # Example: channel Comment;
  struct Channel {
    parser Name &= SymbolName;

    default parser Definition = Keyword.Channel > WS.Set+ > Name > WS > Op.DefinitionEnd;
  }

  struct Parser {
    parser Name &= SymbolName;
    parser Literal &= QuotedString;
    parser Reference &= SymbolName;
    parser DefinitionModifier &= Op.RepetitionModifier | Invert | Alias;

    # "Literal"*
    # ReferencedParser+
    # ^a..Z
    parser Term = Op.Invert? > WS > (Literal | Reference | Range) > WS > Op.RepetitionModifier?;

    # "a" | "b"
    # "a" > "b"
    # "a" > "b" | "c"
    parser OpGroup = (Term | LogicGroup) > ( WS > (Op.Or | Op.Concat) > WS > (Term | LogicGroup))+;

    # "a" > ("b"? > "c" | "d")*
    # "a" > ^("b" | "c")* > "f"
    parser LogicGroup = Op.Invert? > WS > Op.GroupOpen > WS > OpGroup > WS > Op.GroupClose > WS > Op.RepetitionModifier?;

    # ("a" > ("b"? | ("c"+)?) | "d") > "f"?
    parser Expression = (Term | OpGroup | LogicGroup)+;

    parser Default = Keyword.Default > WS.Set+ > Parser;

    default parser Definition = Keyword.Parser > WS.Set+ > Name > WS > DefinitionModifier? > Op.DefinitionStart > WS > Expression > WS > Op.DefinitionEnd;
  }

  struct Struct {
    parser Name &= SymbolName;

    parser Body = (Parser | Comment)* > Parser.Default? > (Parser | Comment)*;

    default parser Definition = Keyword.Struct > WS.Set+ > Name > WS > Syntax.ContextOpen > WS > Body > WS > Syntax.ContextClose;
  }


  struct Grammar -> Main {
    parser Name &= SymbolName;
    parser Body *= Meta | Channel | Parser | Comment | Struct | WS | Parser.Default;

    default parser Definition = Keywords.Grammar > WS.Set+ > Name > Op.CurlyOpen > Body > Op.CurlyClose;
  }

  default parser Grammar = ( Comment | Grammar )*;
}