:WSN:

# Defining the used building blocks of the language.

EOL = "\n" -> whitespace .
SPACE = " " -> whitespace .
TAB = "\t" -> whitespace .
WS = { SPACE | EOL | TAB } -> whitespace .
UNDERSCORE = "_" .
SINGLE_QUOTE = "'" .
DOUBLE_QUOTE = '"' .
QUOTES = SINGLE_QUOTE | DOUBLE_QUOTE .
LETTER =  "A" | "a" | "B" | "b" |
          "C" | "c" | "D" | "d" |
          "E" | "e" | "F" | "f" |
          "G" | "g" | "H" | "h" |
          "I" | "i" | "J" | "j" |
          "K" | "k" | "L" | "l" |
          "M" | "m" | "N" | "n" |
          "O" | "o" | "P" | "p" |
          "Q" | "q" | "R" | "r" |
          "S" | "s" | "T" | "t" |
          "U" | "u" | "V" | "v" |
          "W" | "w" | "X" | "x" |
          "Y" | "y" | "Z" | "z" .
DIGIT     = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
SYMBOL    = "=" | ";" | "[" | "]" | "{" | "}" | "(" | ")" | "." | "|" | "\\" | "#" | "," | "!" | "<" | ">" | "/" | ":" | "-" | "~" | "&" .
REGEXP    = "/" { LETTER | "-" | "[" | "]" | DIGIT } "/" .

# Raising the complexity into logical groups.

CHARACTER = LETTER | DIGIT | SYMBOL .
TEXT = LETTER | DIGIT | SYMBOL | SPACE | TAB | QUOTES .

# Defining the language elements.

ALIAS      = "&" IDENTIFIER .
IDENTIFIER = LETTER { LETTER | UNDERSCORE } .
LITERAL    =
  SINGLE_QUOTE { CHARACTER | SPACE | SYMBOL | UNDERSCORE | DOUBLE_QUOTE } SINGLE_QUOTE |
  DOUBLE_QUOTE { CHARACTER | SPACE | SYMBOL | UNDERSCORE | SINGLE_QUOTE } DOUBLE_QUOTE .
FACTOR     = "{" EXPRESSION "}" | "(" EXPRESSION ")" | "[" EXPRESSION "]" | &REGEXP | &LITERAL | &IDENTIFIER | &ALIAS .
TERM       = WS FACTOR { WS FACTOR } WS .
EXPRESSION = TERM { "|" TERM } .
PRODUCTION = { WS | COMMENT } IDENTIFIER WS "=" EXPRESSION { CHANNEL } "." { WS | COMMENT } .
SYNTAX     = [GRAMMAR] { PRODUCTION } .

# Custom syntax extensions over the WSN definition.

# Defin a grammar name like :PHP: at the begining of the file.
GRAMMAR = ":" LETTER { LETTER } ":" .

# The comment rule and logic was created without coding!
COMMENT = "#" { TEXT } [ EOL ] -> comment .

# Parsing channel, can route a production into different channels.
# Useful to send misc like comment and whitespace into the void :D
CHANNEL    = "->" WS LETTER { LETTER } WS .