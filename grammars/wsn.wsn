:WSN:

# Defining the used building blocks of the language.

EOL = "\n" .
SPACE = " " .
TAB = "\t" .
WS = { SPACE | EOL | TAB } .
UNDERSCORE = "_" .
SINGLE_QUOTE = "'" .
DOUBLE_QUOTE = '"' .
QUOTES = SINGLE_QUOTE | DOUBLE_QUOTE .
LETTER    = /[a-zA-Z]/ .
DIGIT     = /[0-9]/ .
SYMBOL    = "=" | ";" | "[" | "]" | "{" | "}" | "(" | ")" | "." | "|" | "\\" | "#" | "," | "!" | "<" | ">" | "/" | ":" | "-" .

# Raising the complexity into logical groups.

CHARACTER = LETTER | DIGIT | SYMBOL .
TEXT = LETTER | DIGIT | SYMBOL | SPACE | TAB | QUOTES .

# Defining the language elements.

IDENTIFIER = LETTER { LETTER | UNDERSCORE } .
LITERAL =
  SINGLE_QUOTE { CHARACTER | SPACE | SYMBOL | UNDERSCORE | DOUBLE_QUOTE } SINGLE_QUOTE |
  DOUBLE_QUOTE { CHARACTER | SPACE | SYMBOL | UNDERSCORE | SINGLE_QUOTE } DOUBLE_QUOTE .
REGEXP     = "/" { /[^/]/ } "/" .
FACTOR     = "{" EXPRESSION "}" | "(" EXPRESSION ")" | "[" EXPRESSION "]" | REGEXP | LITERAL | IDENTIFIER .
TERM       = WS FACTOR { WS FACTOR } WS .
EXPRESSION = TERM { "|" TERM } .
PRODUCTION = { WS | COMMENT } IDENTIFIER WS "=" EXPRESSION "." { WS | COMMENT } .
SYNTAX     = [GRAMMAR] { PRODUCTION } .

# Custom syntax extensions over the WSN definition.

# Defin a grammar name like :PHP: at the begining of the file.
GRAMMAR = ":" LETTER { LETTER } ":" .

# The comment rule and logic was created without coding!
COMMENT = "#" { TEXT } [ EOL ] .