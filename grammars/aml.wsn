:AML:

# Defining the basic blocks of the language.
parser EOL = "\n" .
parser SPACE = " " .
parser WS = { SPACE | EOL }.
parser LETTER =  /[a-zA-Z]/ .

# Primite types
token TYPE_NAME = SYMBOL_NAME .
token TYPE = "<" TYPE_NAME ">" .

# Field definition
token FIELD_NAME = SYMBOL_NAME .
token FIELD_MODIFIER = "primary" | "unique" | "indexed" .
token FIELD = WS { FIELD_MODIFIER WS } "field" WS FIELD_NAME [ TYPE ] EOL .


# Message definition
token MESSAGE_NAME = SYMBOL_NAME .
token MESSAGE = "message" WS MESSAGE_NAME WS "{" { FIELD | WS } "}" .


# RPC definition
token RPC_NAME = &SYMBOL_NAME .
token REQUEST = &MESSAGE_NAME .
token SUCCESS = &MESSAGE_NAME .
token ERROR = &MESSAGE_NAME .
token RPC = WS "rpc" WS RPC_NAME "(" REQUEST ")" WS "->" WS "<" ERROR "," WS SUCCESS ">" EOL .


# Service definition
token SERVICE_NAME = SYMBOL_NAME .
token SERVICE = "service" WS SERVICE_NAME WS '{' { RPC | WS } '}' .


# Global overides
token GLOBAL_DOMAIN = "$" "domain" WS "{" { FIELD | WS | COMMENT } "}" .

# Enumerators
token ENUM_VALUE = [ "default" WS ] "value" WS SYMBOL_NAME { WS } EOL .
token ENUM = "enum" WS SYMBOL_NAME WS "{" { ENUM_VALUE } "}" .

token GLOBAL_OVERIDES = GLOBAL_DOMAIN .

# Comment definition
token COMMENT = "#" { LETTER | WS } EOL -> comment.

token SYMBOL_NAME = LETTER { LETTER } .

# Final grammar
token SYNTAX = { GLOBAL_OVERIDES | ENUM | SERVICE | MESSAGE | WS | COMMENT } .