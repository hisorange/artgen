:AML:

# Defining the basic blocks of the language.
EOL = "\n" .
SPACE = " " .
WS = { SPACE | EOL }.
LETTER =  "A" | "a" | "B" | "b" |
          "C" | "c" | "D" | "d" |
          "E" | "e" | "F" | "f" |
          "G" | "g" | "H" | "h" |
          "I" | "i" | "J" | "j" |
          "K" | "k" | "L" | "l" |
          "M" | "m" | "N" | "n" |
          "O" | "o" | "P" | "p" |
          "Q" | "q" | "R" | "r" |
          "S" | "s" | "T" | "t" |
          "U" | "u" | "V" | "v" |
          "W" | "w" | "X" | "x" |
          "Y" | "y" | "Z" | "z" .

# Primite types
TYPE_NAME = SYMBOL_NAME .
TYPE = "<" TYPE_NAME ">" .

# Field definition
FIELD_NAME = SYMBOL_NAME .
FIELD = WS "field" SPACE FIELD_NAME [ TYPE ] EOL .


# Message definition
MESSAGE_NAME = SYMBOL_NAME .
MESSAGE = "message" SPACE MESSAGE_NAME SPACE "{" { FIELD | WS } "}" .


# RPC definition
RPC_NAME = SYMBOL_NAME .
REQUEST = MESSAGE_NAME .
SUCCESS = MESSAGE_NAME .
ERROR = MESSAGE_NAME .
RPC = WS "rpc" SPACE RPC_NAME "(" REQUEST ")" SPACE "->" SPACE "<" ERROR "," SPACE SUCCESS ">" EOL .


# Service definition
SERVICE_NAME = SYMBOL_NAME .
SERVICE = "service" SPACE SERVICE_NAME SPACE '{' { RPC | WS } '}' .


# Comment definition
COMMENT = "#" { LETTER | SPACE } EOL .

SYMBOL_NAME = LETTER { LETTER } .

# Final grammar
SYNTAX = { SERVICE | MESSAGE | WS | COMMENT } .